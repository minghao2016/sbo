// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// get_kgram_freqsC
List get_kgram_freqsC(const std::vector<std::string>& sentences, const std::vector<std::string>& dict, int N);
RcppExport SEXP _sbo_get_kgram_freqsC(SEXP sentencesSEXP, SEXP dictSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type sentences(sentencesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type dict(dictSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(get_kgram_freqsC(sentences, dict, N));
    return rcpp_result_gen;
END_RCPP
}
// get_word_freqsC
std::map<std::string, int> get_word_freqsC(const std::vector<std::string>& text);
RcppExport SEXP _sbo_get_word_freqsC(SEXP textSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type text(textSEXP);
    rcpp_result_gen = Rcpp::wrap(get_word_freqsC(text));
    return rcpp_result_gen;
END_RCPP
}
// preprocess
std::vector<std::string> preprocess(const std::vector<std::string>& lines);
RcppExport SEXP _sbo_preprocess(SEXP linesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type lines(linesSEXP);
    rcpp_result_gen = Rcpp::wrap(preprocess(lines));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sbo_get_kgram_freqsC", (DL_FUNC) &_sbo_get_kgram_freqsC, 3},
    {"_sbo_get_word_freqsC", (DL_FUNC) &_sbo_get_word_freqsC, 1},
    {"_sbo_preprocess", (DL_FUNC) &_sbo_preprocess, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_sbo(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
